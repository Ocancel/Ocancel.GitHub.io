<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Database on Ocancel Site</title>
        <link>https://Ocancel.GitHub.io/categories/database/</link>
        <description>Recent content in Database on Ocancel Site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 24 May 2023 20:09:29 +0800</lastBuildDate><atom:link href="https://Ocancel.GitHub.io/categories/database/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>PostgreSQL 锁表解决方案</title>
        <link>https://Ocancel.GitHub.io/post/postgresql-lock-table/</link>
        <pubDate>Wed, 24 May 2023 20:09:29 +0800</pubDate>
        
        <guid>https://Ocancel.GitHub.io/post/postgresql-lock-table/</guid>
        <description>&lt;h2 id=&#34;根据表名查询pid列表&#34;&gt;根据表名查询&lt;code&gt;pid&lt;/code&gt;列表&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;0
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;locks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_locks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;locks&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;inner&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_class&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;locks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;table_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;使用终止函数终止pid&#34;&gt;使用终止函数终止&lt;code&gt;pid&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_terminate_backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>MySQL MVCC</title>
        <link>https://Ocancel.GitHub.io/post/mysql-mvcc/</link>
        <pubDate>Wed, 01 Jun 2022 22:59:43 +0800</pubDate>
        
        <guid>https://Ocancel.GitHub.io/post/mysql-mvcc/</guid>
        <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;MVCC全称Multi-Version Concurrency Control，即&lt;strong&gt;多版本并发控制&lt;/strong&gt;。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多版本并发控制&lt;/strong&gt;：指的是一种高并发技术。最早的数据库系统，只有读读之间可以并发，读写，写读，写写都要阻塞。引入多版本之后，&lt;strong&gt;只有写写之间相互阻塞，其他三种操作都可以并行&lt;/strong&gt;，这样大幅度提高了InnoDB的并发度。在内部实现中，InnoDB是基于&lt;code&gt;undo log&lt;/code&gt;实现的，通过&lt;code&gt;undo log&lt;/code&gt;可以找回数据的历史版本。找回的数据历史版本可以提供给用户读（按照隔离级别的定义，有些读请求只能看到比较老的数据版本），也可以在回滚的时候覆盖数据页上的数据。在InnoDB内部中，会记录一个全局的活跃读写事务数组，其主要用来判断事务的可见性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MVCC是一种多版本并发控制机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;前置知识&#34;&gt;前置知识&lt;/h2&gt;
&lt;h4 id=&#34;innodb的当前读和快照读&#34;&gt;InnoDB的当前读和快照读&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;当前读&lt;/strong&gt;：读取的记录是最新版本，读取时要保证其他事务不能修改当前记录，会对读取的记录进行加锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;当前读主要包含以下场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享锁：&lt;code&gt;select ... lock in share mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;排他锁：&lt;code&gt;select for update&lt;/code&gt;，&lt;code&gt;insert&lt;/code&gt;，&lt;code&gt;update&lt;/code&gt;，&lt;code&gt;delete&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快照读&lt;/strong&gt;：&lt;strong&gt;不加锁&lt;/strong&gt;的&lt;code&gt;select&lt;/code&gt;操作属于快照读，即不加锁的非阻塞读。快照读基于多版本并发控制实现，即MVCC，正因为如此，可能导致快照读读取到的数据不是最新版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;快照读的前提是事务的隔离级别不是串行级别，串行级别下快照读会退化成当前读。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MVCC就是为了实现读-写冲突不加锁，而这个读指的就是&lt;strong&gt;快照读&lt;/strong&gt;，而非当前读，当前读实际上是一种加锁的操作，是悲观锁的实现。&lt;/p&gt;
&lt;h4 id=&#34;数据库的并发场景&#34;&gt;数据库的并发场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;读-读&lt;/code&gt;：不存在线程安全问题，不需要并发控制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;读-写&lt;/code&gt;：存在线程安全问题，可能会造成事务隔离性问题，可能遇到脏读，幻读，不可重复读&lt;/li&gt;
&lt;li&gt;&lt;code&gt;写-写&lt;/code&gt;：存在线程安全问题，可能会存在更新丢失问题，如第一类更新丢失，第二类更新丢失&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;第一类更新丢失：事务A撤销时，把已经提交的事务B的更新数据覆盖。&lt;/li&gt;
&lt;li&gt;第二类更新丢失：事务A覆盖事务B已经提交的数据，造成事务B所做的操作丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;实现原理&#34;&gt;实现原理&lt;/h2&gt;
&lt;p&gt;MVCC主要依赖记录中的&lt;strong&gt;三个隐式字段&lt;/strong&gt;、&lt;strong&gt;undo log&lt;/strong&gt;、&lt;strong&gt;Read View&lt;/strong&gt;来实现的。&lt;/p&gt;
&lt;h3 id=&#34;隐式字段&#34;&gt;隐式字段&lt;/h3&gt;
&lt;p&gt;每行记录除了我们自定义的字段外，还有数据库隐式定义的&lt;code&gt;DB_TRX_ID&lt;/code&gt;，&lt;code&gt;DB_ROLL_PTR&lt;/code&gt;，&lt;code&gt;DB_ROW_ID&lt;/code&gt;等字段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DB_TRX_ID&lt;/code&gt;：&lt;code&gt;6byte&lt;/code&gt;， 最后修改（插入/更新）的事务ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DB_ROLL_PTR&lt;/code&gt;：&lt;code&gt;7byte&lt;/code&gt;，回滚指针，配合&lt;code&gt;undo log&lt;/code&gt;指向上一个版本的记录（存储于&lt;code&gt;rollback segment&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DB_ROW_ID&lt;/code&gt;：&lt;code&gt;6byte&lt;/code&gt;，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以&lt;code&gt;DB_ROW_ID&lt;/code&gt;产生一个聚簇索引&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Column1&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Column2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;DB_TRX_ID&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;DB_ROW_ID&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;DB_ROLL_PTR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;value1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;value2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x12446462&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;undo日志&#34;&gt;undo日志&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;insert undo log&lt;/code&gt;：事务在&lt;code&gt;insert&lt;/code&gt;新记录时产生的&lt;code&gt;undo log&lt;/code&gt;，只在事务回滚时需要，并且在事务提交后可以被立即丢弃。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update undo log&lt;/code&gt;：事务在进行&lt;code&gt;update&lt;/code&gt;或&lt;code&gt;delete&lt;/code&gt;时产生的&lt;code&gt;undo log&lt;/code&gt;，不仅在事务回滚时需要，在快照读时也需要，所以不能随便删除，只有在快速读或事务回滚不涉及该日志时，对应的日志才会被&lt;code&gt;purge&lt;/code&gt;线程统一清除。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;purge&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了实现InnoDB的MVCC机制，更新或者删除操作都只是设置一下老记录的deleted_bit，并不真正将过时的记录删除。&lt;/li&gt;
&lt;li&gt;为了节省磁盘空间，InnoDB有专门的&lt;code&gt;purge&lt;/code&gt;线程来清理&lt;code&gt;deleted_bit&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;的记录。为了不影响MVCC的正常工作，&lt;code&gt;purge&lt;/code&gt;线程自己也维护了一个&lt;code&gt;read view&lt;/code&gt;（这个&lt;code&gt;read view&lt;/code&gt;相当于系统中最老活跃事务的&lt;code&gt;read view&lt;/code&gt;），如果某个记录的&lt;code&gt;deleted_bit&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;，并且&lt;code&gt;DB_TRX_ID&lt;/code&gt;相对于&lt;code&gt;purge&lt;/code&gt;线程的&lt;code&gt;read view&lt;/code&gt;可见，那么这条记录一定是可以被安全清除的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;MVCC依赖于&lt;code&gt;update undo log&lt;/code&gt;，&lt;code&gt;undo log&lt;/code&gt;实际上就是存在&lt;code&gt;rollback segment&lt;/code&gt;中旧记录链。&lt;/p&gt;
&lt;h3 id=&#34;read-view&#34;&gt;Read View&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Read View&lt;/code&gt;是事务进行快照读操作时生产的读视图&lt;code&gt;Read View&lt;/code&gt;，在该事务执行快照读的那一刻，会生成数据库系统当前的一个快照，记录并维护系统当前活跃事务的ID（当每个事务开启时，都会被分配一个ID, 这个ID是递增的，所以最新的事务，ID值越大）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Read View&lt;/code&gt;主要是用来做可见性判断，&lt;code&gt;Read View&lt;/code&gt;遵循一个可见性算法，主要是将&lt;strong&gt;要被修改的数据&lt;/strong&gt;的最新记录中的&lt;code&gt;DB_TRX_ID&lt;/code&gt;（即当前事务ID）取出来，与系统当前其他活跃事务的ID去对比（由Read View维护），如果&lt;code&gt;DB_TRX_ID&lt;/code&gt;跟&lt;code&gt;Read View&lt;/code&gt;的属性做了某些比较，不符合可见性，那就通过&lt;code&gt;DB_ROLL_PTR&lt;/code&gt;回滚指针去取出&lt;code&gt;undo Log&lt;/code&gt;中的&lt;code&gt;DB_TRX_ID&lt;/code&gt;再比较，即遍历链表的&lt;code&gt;DB_TRX_ID&lt;/code&gt;（从链首到链尾，即从最近的一次修改查起），直到找到满足特定条件的&lt;code&gt;DB_TRX_ID&lt;/code&gt;，那么这个&lt;code&gt;DB_TRX_ID&lt;/code&gt;所在的旧记录就是当前事务能看见的最新&lt;strong&gt;老版本&lt;/strong&gt;。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
